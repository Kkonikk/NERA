/*******************************************************************************
* Instrument: NERA_source.instr
*
* Written by: Yurii Kireenko
* Date: 23.10.18
* Origin: PNPI
* %INSTRUMENT_SITE: Templates
*
* NERA TOF-spectrometer guide
*
* IBR-2M guide for channel 7
*
* source_lambda_min:   [AA] minimal wavelength produced by the source
* source_lambda_max:   [AA] maximal wavelength produced by the source
* source_pulse_number: [int] number of pulses produced by the source
* source_optics_dist:  [m] distance between moderator and optics
* ...
*
* %L
* <reference/HTML link>
*
* %E
*******************************************************************************/
DEFINE INSTRUMENT Nera(delta = 0, chop_width_1 = 0.055, chop_width_2 = 0.205, chop_backgr_on = 1,chop_lambda_on = 1, Edes = 140,toffset = 0)

DECLARE
%{
//100%
double distrance_after_1chop = 0.16;
double guide_swiss = 24.43175;
double guide_swiss_1 = 14.49875, guide_swiss_2 = 6.49975, guide_swiss_3 = 3.43125;
double height_guide_s1 = 0.16, height_guide_s2 = 0.108705, height_guide_s3 = 0.075084;
//double linh = 2.5;
double linh1 = 12.43, linh2 = 5.93, linh3 = 2.5; // put formula here

//from stars
double guide_length_before_2chop;
double distance_after_guide_to_2chop = 0.16;
double distance_after_2chop = 0.16;
double m_w = 1, m_h = 2;
double guide_length_after_2chop = 103; //change and put formula here
double distance_before_sample = 0.5;

//background chopper
double chop_back_delay = 0.001, chop_back_nu = 5;
double  chop_back_radius = 0.67, chop_back_yheight = 0.16, chop_back_slit_xwidth = 0.23,chop_back_slit_height = 0.27;
double chop_back_jitter = 0;
double theta_0 = 60;
//fermi chopper
double chop_rad_1 = 0.24, chop_length = 0.48;
double LT0, phase_T0;
double toffset = 0;
double chop_freq = 2.5;
double delta;
%}

INITIALIZE
%{
guide_length_before_2chop = 26.95 - source_optics_dist - distrance_after_1chop - distance_after_guide_to_2chop;
LT0 = source_optics_dist +distrance_after_1chop+guide_length_before_2chop+chop_length/2+0.03+0.001;
phase_T0 = (LT0)/(sqrt(Edes)*SE2V)+toffset;
//LT0 = 27.04/7912;
%}

TRACE

%include "NERA_source.instr"

/* ******************************* Background chopper 1  *************************************/
COMPONENT monitor_lambda_backgr_chop = Monitor_nD(
    xwidth=0.2, yheight=0.2, bins=100, restore_neutron=1, 
    options="lambda limits = [0 20]")
AT (0, 0, -0.1) RELATIVE PREVIOUS

COMPONENT slit_backgr_chop = Slit(
    xwidth=chop_back_slit_xwidth, 
    yheight=chop_back_slit_height)
AT (0, 0, 0) RELATIVE PREVIOUS

COMPONENT diskchopper = DiskChopper(
    theta_0=theta_0, 
    radius=chop_back_radius, 
    yheight=chop_back_yheight, 
    nu=chop_back_nu, 
    nslit=1, 
    jitter=chop_back_jitter, 
    delay=chop_back_delay, 
    verbose=1)
WHEN (chop_backgr_on == 1)
AT (0, 0, 0.1) RELATIVE slit_backgr_chop

COMPONENT monitor_lambda_backgr_chop2 = Monitor_nD(
    xwidth=0.2, yheight=0.2, bins=100, restore_neutron=1, 
    options="lambda limits = [0 20]")
AT (0, 0, 0.01) RELATIVE diskchopper

COMPONENT monitor_lambda_backgr_chop3 = Monitor_nD(
    xwidth=0.2, yheight=0.2, bins=100, restore_neutron=1, 
    options="t limits = [0 0.3] lambda limits = [0 20]")
AT (0, 0, 0.01) RELATIVE PREVIOUS

/* ******************************* Guide between choppers  *************************************/

COMPONENT  CG_1 = Guide_gravity(
    w1 = guide_width, h1 = guide_height,  l = guide_length_before_2chop, mleft  = m_w, mright = m_w, 
mtop = m_h, mbottom = m_h, G = -9.81)
  AT (0, 0, distrance_after_1chop) RELATIVE diskchopper

/* ******************************* lambda chopper *************************************/

/*
COMPONENT diskchopper2 = Slit(
    xwidth=guide_width, 
    yheight=guide_height)
AT (0, 0, guide_length_before_2chop + distance_after_guide_to_2chop) RELATIVE PREVIOUS
*/

COMPONENT chopper_start2 = Arm()
AT (0, 0, guide_length_before_2chop+0.001) RELATIVE CG_1

COMPONENT monitor_nd_lambda1 = Monitor_nD(
    xwidth=guide_width, yheight=guide_height, bins=100, restore_neutron=1, 
    options="lambda limits = [0 20]")
AT (0, 0, 0) RELATIVE chopper_start2

COMPONENT t0_chopp=Vertical_T0a(len=chop_length,w1=chop_width_1,w2=chop_width_2,nu=chop_freq,delta=delta,tc=phase_T0,
                 ymin=-0.1,ymax=0.1)
WHEN (chop_lambda_on == 1)
AT (0, 0, chop_length/2+0.03) RELATIVE chopper_start2

COMPONENT monitor_nd_lambda2 = Monitor_nD(
    xwidth=guide_width, yheight=guide_height, bins=100, restore_neutron=1, 
    options="lambda limits = [0 20]")
AT (0, 0, chop_length+0.12) RELATIVE chopper_start2

COMPONENT monitor_nd_lambda3 = Monitor_nD(
    xwidth=guide_width, yheight=guide_height, bins=100, restore_neutron=1, 
    options="t limits = [0 0.3] lambda limits = [0 20]")
AT (0, 0, 0.00001) RELATIVE PREVIOUS

/*
COMPONENT monitor_nd_lambda1 = Monitor_nD(
    xwidth=guide_width, yheight=guide_height, bins=100, restore_neutron=1, 
    options="lambda limits = [0 20]")
AT (0, 0, guide_length_before_2chop+0.001) RELATIVE PREVIOUS

COMPONENT fermichopper = Vertical_T0a(
    len=0.48, 
    w1=w1_center, 
    w2=w2, 
    nu=chop_freq, 
    delta=t_center_edge, 
    tc=tc, 
    ymin=-0.08, 
    ymax=0.08)
AT (0, 0, chop_rad_1+0.01) RELATIVE PREVIOUS
/*
COMPONENT fermichopper = FermiChopper(
    phase=chop_phase_1, 
    radius=chop_rad_1, 
    nu=chop_freq, 
    w=chop_slit_width, 
    nslit=chop_slit_numb, 
    m=0, 
    length=chop_channel_length, yheight = 0.16)
AT (0, 0, chop_rad_1+0.01) RELATIVE PREVIOUS
*/
/*
COMPONENT monitor_nd_lambda2 = Monitor_nD(
    xwidth=guide_width, yheight=guide_height, bins=100, restore_neutron=1, 
    options="lambda limits = [0 20]")
AT (0, 0, chop_rad_1*2 + 0.05) RELATIVE monitor_nd_lambda1

/* ******************************* Guide_swiss_end_without_wavy  *************************************/
/*
COMPONENT  CG_2 = Guide_gravity(
    w1 = guide_width, h1 = guide_height,  l = guide_length_after_2chop - guide_swiss, mleft  = m_w, mright = m_w, 
mtop = m_h, mbottom = m_h, G = -9.81)
  AT (0, 0, distrance_after_1chop) RELATIVE diskchopper2

COMPONENT guide_tapering = Guide_tapering(
    option="parabolical", 
    w1=guide_width, h1=height_guide_s1, 
    l=guide_swiss_1,
     louth=linh1,
    mx=1, 
    my=2)
AT (0, 0, guide_length_after_2chop - guide_swiss+0.001) RELATIVE PREVIOUS

COMPONENT guide_tapering2 = Guide_tapering(
    option="parabolical", 
    w1=guide_width, h1=height_guide_s2, 
    l=guide_swiss_2,
     louth=linh2,
    mx=1, 
    my=3)
AT (0, 0, guide_swiss_1 + 0.001) RELATIVE PREVIOUS

COMPONENT guide_tapering3 = Guide_tapering(
    option="parabolical", 
    w1=guide_width, h1=height_guide_s3, 
    l=guide_swiss_3,
     louth=linh3,
    mx=1, 
    my=5)
AT (0, 0, guide_swiss_2 + 0.001) RELATIVE PREVIOUS

COMPONENT guide_end = Arm()
AT (0, 0, guide_swiss_3+0.001) RELATIVE PREVIOUS

//m_left/right = 1, top/bottom = 2, parabolic guide a = -4.208095z^2
/*
COMPONENT guide_tapering = Guide_tapering(
    option="parabolical", 
    w1=guide_width, h1=guide_height, 
    l=guide_swiss,
     louth=linh,
    mx=1, 
    my=5)
AT (0, 0, guide_length_after_2chop - guide_swiss+0.001) RELATIVE PREVIOUS

/* ******************************* Sample  *************************************/
/*
COMPONENT monitor_nd_xy = Monitor_nD(
    xwidth=0.2, yheight=0.2, bins=100, restore_neutron=1, 
    options="x y")
AT (0, 0, distance_before_sample) RELATIVE guide_end

COMPONENT monitor_nd_lambda = Monitor_nD(
    xwidth=0.2, yheight=0.2, bins=100, restore_neutron=1, 
    options="lambda limits = [0 20]")
AT (0, 0, distance_before_sample+0.001) RELATIVE guide_end

COMPONENT monitor_nd_dxdy = Monitor_nD(
    xwidth=0.2, yheight=0.2, bins=100, restore_neutron=1, 
    options="dx limits = [-1 1] dy limits = [-1 1]")
AT (0, 0, distance_before_sample+0.002) RELATIVE guide_end

COMPONENT monitor_nd_t = Monitor_nD(
    xwidth=0.2, yheight=0.2, bins=100, restore_neutron=1, 
    options="t")
AT (0, 0, distance_before_sample+0.003) RELATIVE guide_end

COMPONENT sample_arm = Arm()
AT (0, 0, 0.001) RELATIVE PREVIOUS

/* ******************************* end  *************************************/

FINALLY
%{
//printf("floats: %4.2f",LT0);
%}

END
