/*******************************************************************************
* Instrument: NERA_source.instr
*
* Written by: Yurii Kireenko
* Date: 23.10.18
* Origin: PNPI
* %INSTRUMENT_SITE: Templates
*
* NERA TOF-spectrometer guide
*
* IBR-2M guide for channel 7
*
* source_lambda_min:   [AA] minimal wavelength produced by the source
* source_lambda_max:   [AA] maximal wavelength produced by the source
* source_pulse_number: [int] number of pulses produced by the source
* source_optics_dist:  [m] distance between moderator and optics
* ...
*
* %L
* <reference/HTML link>
*
* %E
*******************************************************************************/
DEFINE INSTRUMENT Nera(ell_length = 10,louth = 0.5, loutw = 0.5, sample_size = 0.01)
DECLARE
%{

double total_length = 100.8;
double m_side = 6, m_top = 6;
double distance_before_sample = 0.35;
double guide_length_st;


//background chopper
double chop_back_delay = 0.001, chop_back_nu = 5;
double  chop_back_radius = 0.67, chop_back_yheight = 0.16, chop_back_slit_xwidth = 0.23,chop_back_slit_height = 0.27;
double chop_back_jitter = 0;
double theta_0 = 60;
//fermi chopper
double chop_rad_1 = 0.24, chop_length = 0.48;
double LT0, phase_T0;
double toffset = 0;
double chop_freq = 2.5;
double delta;
//temp
//double delta = 0, chop_width_1 = 0.234, chop_width_2 = 0.235, chop_backgr_on = 1,chop_lambda_on = 1, Edes = 100,toffset = 0.013;
%}

INITIALIZE
%{
guide_length_st = total_length-ell_length;
//LT0 = source_optics_dist +distrance_after_1chop+guide_length_before_2chop+chop_length/2+0.03+0.001;
//phase_T0 = (LT0)/(sqrt(Edes)*SE2V)+toffset;
//LT0 = 27.04/7912;
%}

TRACE

%include "NERA_source.instr"


COMPONENT  CG_1 = Guide_gravity(
    w1 = guide_width, h1 = guide_height,  l = guide_length_st, mleft  = 6, mright = 6, 
mtop = 6, mbottom = 6, G = -9.81)
  AT (0, 0, 0.01) RELATIVE Guide_start_arm

COMPONENT elliptic_guide = Guide_tapering(
    option="parabolical", 
    w1=guide_width, 
    h1=guide_height, 
    l=ell_length, 
    louth = louth,
    loutw = loutw,
    mx=m_side,
    my=m_top)
AT (0, 0, guide_length_st + 0.001) RELATIVE CG_1


COMPONENT guide_end = Arm()
AT (0, 0, total_length+0.01) RELATIVE CG_1


/* ******************************* template for choppers  *************************************/
/*
COMPONENT diskchopper = DiskChopper(
    theta_0=theta_0, 
    radius=chop_back_radius, 
    yheight=chop_back_yheight, 
    nu=chop_back_nu, 
    nslit=1, 
    jitter=chop_back_jitter, 
    delay=chop_back_delay, 
    verbose=1)
WHEN (chop_backgr_on == 1)
AT (0, 0, 0.0001) RELATIVE Guide_start_arm

COMPONENT diskchopper2=Vertical_T0a(len=chop_length,w1=chop_width_1,w2=chop_width_2,nu=chop_freq,delta=delta,tc=phase_T0,
                 ymin=-0.1,ymax=0.1)
WHEN (chop_lambda_on == 1)
AT (0, 0, chop_length/2+0.03) RELATIVE chopper_start2

/* ******************************* Sample  *************************************/

COMPONENT monitor_nd_x = Monitor_nD(
    xwidth=sample_size, yheight=0.2, bins=100, restore_neutron=1, 
    options="x")
AT (0, 0, distance_before_sample) RELATIVE guide_end

COMPONENT monitor_nd_dx = Monitor_nD(
    xwidth=sample_size, yheight=0.2, bins=100, restore_neutron=1, 
    options="dx")
AT (0, 0, distance_before_sample+0.001) RELATIVE guide_end

COMPONENT monitor_nd_y = Monitor_nD(
    xwidth=0.15, yheight=sample_size, bins=100, restore_neutron=1, 
    options="y")
AT (0, 0, distance_before_sample + 0.002) RELATIVE guide_end

COMPONENT monitor_nd_dy = Monitor_nD(
    xwidth=0.15, yheight=sample_size, bins=100, restore_neutron=1, 
    options="dy")
AT (0, 0, distance_before_sample + 0.003) RELATIVE guide_end

COMPONENT monitor_nd_lambda_1 = Monitor_nD(
    xwidth=sample_size, yheight=sample_size, bins=100, restore_neutron=1, 
    options="lambda limits = [0.5 1]")
AT (0, 0, distance_before_sample + 0.004) RELATIVE guide_end

COMPONENT monitor_nd_lambda_45 = Monitor_nD(
    xwidth=sample_size, yheight=sample_size, bins=100, restore_neutron=1, 
    options="lambda limits = [0.5 4.5]")
AT (0, 0, distance_before_sample + 0.005) RELATIVE guide_end


/* ******************************* end  *************************************/

FINALLY
%{
//printf("floats: %4.2f",LT0);
%}

END
